#!/usr/bin/env python3
import argparse
import hashlib
import json
import os
import subprocess
import sys

from dataclasses import dataclass
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import List, Optional


VERSION = "0.0.1"


STDLIB = """

# Generated code
panic() {
    echo "FATAL: ${*}" >&2
    exit 1
}

depends_on() {
    local this_dir
    this_dir="$(dirname "${BLARG_TARGET}")"
    for script_basename in "${@}"; do
        "${this_dir}/${script_basename}.bash"
    done
}

"""


BASE = """

# Generated code
reached_if() {
    false
}

apply() {
    true
}

"""


EXECUTOR = """

# Generated code
if ! reached_if &> /dev/null; then
    apply
fi
"""


@dataclass
class CliArgs:
    script_path: Optional[str]
    dump_src: bool
    version: bool


class CliParser(argparse.ArgumentParser):
    def __init__(self):
        super().__init__("blarg", description="Execute bash target files")
        self.add_argument(
            "script_path", help="Script file to execute", default=None, nargs="?"
        )
        self.add_argument(
            "--dump-src",
            "-d",
            help="Don't run the script; just dump the full source that would be executed by Bash",
            action="store_true",
        )
        self.add_argument(
            "--version", "-v", help="Display version number", action="store_true"
        )


def parse_args() -> CliArgs:
    args = CliParser().parse_args()
    return CliArgs(
        os.path.abspath(args.script_path) if args.script_path else None,
        args.dump_src,
        args.version,
    )


def list_dir_if_exists(dir_path: Path) -> List[Path]:
    try:
        return sorted([p.resolve() for p in dir_path.iterdir() if not p.is_dir()])
    except (FileNotFoundError, NotADirectoryError):
        return []


def generate_script(script_path: Path) -> str:
    script = f"# {script_path}\n" + script_path.read_text("utf8")
    script_parts = [STDLIB]

    lib_d_dir = Path("lib.d")  # lib.d dir in current working directory
    for file in list_dir_if_exists(lib_d_dir):
        if not str(file).endswith(".sh") and not str(file).endswith(".bash"):
            continue
        script_parts.append(f"# {file}\n{file.read_text('utf8')}\n")

    return "".join(script_parts + [BASE, script, EXECUTOR])


def main() -> int:
    args = parse_args()

    if args.version:
        print(f"blarg version {VERSION}")
        return 0

    if not args.script_path:
        CliParser().print_help()
        return 0

    if args.dump_src:
        print(generate_script(Path(args.script_path)))
        return 0

    env = os.environ
    env["BLARG_TARGET"] = args.script_path

    running_targets_unparsed = env.get("BLARG_RUNNING_TARGETS")
    if running_targets_unparsed:
        running_targets = json.loads(running_targets_unparsed)
    else:
        running_targets = []

    if args.script_path in running_targets:
        stack_seperator = "\n-> "
        print(
            f"FATAL: Circular dependency detected at `{args.script_path}`:\n"
            f"{stack_seperator.join(running_targets)}"
            f"{stack_seperator}{args.script_path}",
            file=sys.stderr,
        )
        return 1

    running_targets.append(args.script_path)
    env["BLARG_RUNNING_TARGETS"] = json.dumps(running_targets)

    if temp_dir_path := env.get("BLARG_RUN_DIR"):
        temp_dir = None  # a different blarg process is managing this directory
    else:
        temp_dir = TemporaryDirectory()
        temp_dir_path = temp_dir.name
        env["BLARG_RUN_DIR"] = temp_dir_path

    script_path_digest = hashlib.sha1(args.script_path.encode("utf8")).hexdigest()
    marker_file = Path(temp_dir_path) / script_path_digest
    if marker_file.exists():
        return 0  # this target has already been run
    else:
        marker_file.touch()

    try:
        result = subprocess.run(
            ["bash", "-Eeuo", "pipefail"],
            input=generate_script(Path(args.script_path)),
            encoding="utf8",
            env=env,
        )
    finally:
        if temp_dir is not None:
            temp_dir.cleanup()

    return result.returncode


if __name__ == "__main__":
    exit_code = main()
    quit(exit_code)
