#!/usr/bin/env python3
import argparse
import os
import subprocess

from dataclasses import dataclass
from typing import Optional


STDLIB = """
panic() {
    echo "FATAL: ${*}" >&2
    exit 1
}

depends_on() {
    local this_dir
    this_dir="$(dirname "${BLARG_TARGET}")"
    for script_basename in "${@}"; do
        "${this_dir}/${script_basename}.sh"
    done
}

reached_if() {
    false
}

apply() {
    true
}

"""


EXECUTOR = """

if ! reached_if &> /dev/null; then
    apply
fi
"""


@dataclass
class CliArgs:
    script_path: Optional[str]
    dump_src: bool
    version: bool


def parse_args() -> CliArgs:
    parser = argparse.ArgumentParser("blarg", description="Execute bash target files")
    parser.add_argument(
        "script_path", help="Script file to execute", default=None, nargs="?"
    )
    parser.add_argument(
        "--dump-src",
        "-d",
        help="Don't run the script; just dump the full source that would be executed by Bash",
        action="store_true",
    )
    parser.add_argument(
        "--version", "-v", help="Display version number", action="store_true"
    )
    args = parser.parse_args()
    return CliArgs(args.script_path, args.dump_src, args.version)


def main() -> int:
    args = parse_args()

    if args.version:
        print("blarg version 0.0.1")
        return 0

    with open(args.script_path, "r", encoding="utf8") as f:
        script = "".join(f.readlines())

    full_script = STDLIB + script + EXECUTOR

    if args.dump_src:
        print(full_script)
        return 0

    env = os.environ
    env["BLARG_TARGET"] = args.script_path

    subprocess.run(
        ["bash", "-Eeuo", "pipefail"],
        check=True,
        input=full_script,
        encoding="utf8",
        env=env,
    )

    return 0


if __name__ == "__main__":
    exit_code = main()
    quit(exit_code)
